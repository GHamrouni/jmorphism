{"name":"Jmorphism","body":"jmorphism\r\n=======================\r\n\r\nA Java library for  2D Cage-based Image Transform.\r\n\r\n[See a video of  jmorphism in action](http://www.youtube.com/watch?v=eMu-ePsIh8I)\r\n\r\nThe input is an arbitrary polygon P (not necessarily convex) containing an image (image 1). \r\nThe pixels of (image 1) change their positions, under the influence of the vertices of P.\r\n\r\n<img alt=\"jmorphism demo\" src=\"https://github.com/GHamrouni/jmorphism/raw/master/deformation.jpg\" />\r\n\r\n\r\nUsing this library\r\n------------------\r\n\r\nGiven two polygons poly and polyT formed by a clockwise collections of vertices:\r\n\r\n    Collection<Vector2D> vertices  = (...)\r\n    Collection<Vector2D> verticesT = (...) \r\n\r\n    Polygon2D poly  = new Polygon2D(vertices);\r\n    Polygon2D polyT = new Polygon2D(verticesT);\r\n\r\njmorphism can create a one-to-one correspondence mapping a point in poly to a point in polyT:\r\n\r\n    PolygonMorphism morphism = PolygonMorphismFactory.get(PolygonMorphismKind.Rigid, poly, polyT);\r\n\r\nmorphism is a structure preserving mapping. Two kinds of morphisms are available:\r\n\r\n* Rigid: Uses internally the generalized barycentric coordinates\r\n* ShapePreserving: Uses internally the Green Coordinates that lead to shape-preserving deformations\r\n\r\nTo compute the image of a point lying inside the polygon poly:\r\n\r\n    Vector2D p2 = morphism.map(p);//p2 is inside polyT\r\n\r\nBuilding\r\n--------\r\n\r\n    mvn clean install\r\n\r\nContributing\r\n--------\r\n\r\nIf you'd like to contribute :\r\n\r\n1. Fork it and create a branch\r\n1. Hack it and Commit your changes\r\n1. Push to the branch\r\n1. Send a pull request\r\n\r\n","tagline":"jmorphism: A Java library for 2D Cage-based Image Transform","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}